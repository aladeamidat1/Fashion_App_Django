# Generated by Django 5.2.5 on 2025-09-25 14:26

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bust', models.FloatField(blank=True, help_text='Bust measurement in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(300)])),
                ('waist', models.FloatField(blank=True, help_text='Waist measurement in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(300)])),
                ('hips', models.FloatField(blank=True, help_text='Hip measurement in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(300)])),
                ('chest', models.FloatField(blank=True, help_text='Chest measurement in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(300)])),
                ('shoulder_width', models.FloatField(blank=True, help_text='Shoulder width in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('arm_length', models.FloatField(blank=True, help_text='Arm length in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)])),
                ('sleeve_length', models.FloatField(blank=True, help_text='Sleeve length in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)])),
                ('bicep', models.FloatField(blank=True, help_text='Bicep measurement in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('forearm', models.FloatField(blank=True, help_text='Forearm measurement in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('wrist', models.FloatField(blank=True, help_text='Wrist measurement in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('inseam', models.FloatField(blank=True, help_text='Inseam measurement in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)])),
                ('outseam', models.FloatField(blank=True, help_text='Outseam measurement in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)])),
                ('thigh', models.FloatField(blank=True, help_text='Thigh measurement in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)])),
                ('calf', models.FloatField(blank=True, help_text='Calf measurement in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ankle', models.FloatField(blank=True, help_text='Ankle measurement in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('height', models.FloatField(blank=True, help_text='Height in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(300)])),
                ('weight', models.FloatField(blank=True, help_text='Weight in kilograms', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('neck', models.FloatField(blank=True, help_text='Neck measurement in centimeters', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the measurements')),
                ('measurement_type', models.CharField(choices=[('manual', 'Manual Entry'), ('ai_generated', 'AI Generated'), ('hybrid', 'AI + Manual Correction')], default='manual', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this measurement record is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(limit_choices_to={'is_Customer': True}, on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to=settings.AUTH_USER_MODEL)),
                ('designer', models.ForeignKey(limit_choices_to={'is_Designer': True}, on_delete=django.db.models.deletion.CASCADE, related_name='customer_measurements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
                'unique_together': {('customer', 'designer', 'is_active')},
            },
        ),
        migrations.CreateModel(
            name='MeasurementHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=50)),
                ('old_value', models.FloatField(null=True)),
                ('new_value', models.FloatField(null=True)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('reason', models.CharField(blank=True, help_text='Reason for the change', max_length=100)),
                ('changed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='measurements.measurement')),
            ],
            options={
                'ordering': ['-changed_at'],
            },
        ),
        migrations.CreateModel(
            name='DesignerCustomerRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('inactive', 'Inactive'), ('blocked', 'Blocked')], default='pending', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(limit_choices_to={'is_Customer': True}, on_delete=django.db.models.deletion.CASCADE, related_name='designer_relationships', to=settings.AUTH_USER_MODEL)),
                ('designer', models.ForeignKey(limit_choices_to={'is_Designer': True}, on_delete=django.db.models.deletion.CASCADE, related_name='customer_relationships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
                'unique_together': {('designer', 'customer')},
            },
        ),
    ]
